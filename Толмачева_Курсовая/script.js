let playedBang = false;
let gameDeck = [];
let remainingDeck = [];
let currentTurn = "";
let isMyTurn = false;
let initialTurnHardcodeApplied = false;

let username = sessionStorage.getItem("username");
const roomId = sessionStorage.getItem("roomId");
let players = JSON.parse(sessionStorage.getItem("players")) || [];

const socket = new WebSocket("ws://localhost:3000");
let currentPlayerIndex = -1;

function updatePlayerIndex() {
  currentPlayerIndex = players.findIndex(p => p.username === username);
}

socket.onopen = () => {
  console.log("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
  socket.send(JSON.stringify({
    type: "join_room",
    roomId,
    username
  }));
};

socket.onmessage = (event) => {
  const data = JSON.parse(event.data);

  if (data.type === "greeting") {
    console.log(data.message);
  }

  if (data.type === "room_update") {
    if (window.location.pathname.includes("lobby.html")) {
      updateLobbyUI(data.players);
    }
  }

  if (data.type === "game_start" || data.type === "game_update") {
    const clientUsername = sessionStorage.getItem("username");
    if (!clientUsername) {
      console.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ sessionStorage!");
      alert("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–π—Ç–∏.");
      return;
    }

    if (username !== clientUsername) {
      console.warn(`–ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è username ('${username}') –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç sessionStorage ('${clientUsername}'). –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ sessionStorage.`);
    }

    players = data.players;
    currentTurn = data.currentPlayer;
    isMyTurn = currentTurn === username;
    updatePlayerIndex();

    if (data.type === "game_start") {
      const firstPlayerInReceivedList = players[0];
      if (firstPlayerInReceivedList && firstPlayerInReceivedList.username === username) {
        isMyTurn = true;
        console.log(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ true –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${username} (–∏–Ω–¥–µ–∫—Å 0 –≤ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ).`);
      } else {
        isMyTurn = false;
      }
    } else if (data.type === "game_update") {
      isMyTurn = currentTurn === username;
    }

    console.log(`[${data.type}] currentTurn: ${currentTurn}, username: ${username}, isMyTurn: ${isMyTurn}`);

    sessionStorage.setItem("players", JSON.stringify(players));
    updateUI();
    updatePlayerInfo();
    updateActionButtons();
    updateDebugInfo();

    if (data.playersCount !== undefined) {
      document.getElementById("players-count").textContent = data.playersCount;
    }
  }

  if (data.type === "error") {
    console.error("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", data.message);
  }
};

function drawNewCard() {
  if (!isMyTurn) {
    alert("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!");
    return;
  }

  const dummyCard = { name: "–ë–∞—Ö", img: "images/bah.png", type: "attack" };
  const player = players.find(p => p.username === username);
  if (player && !player.hand.some(card => card.name === dummyCard.name)) {
    player.hand.push(dummyCard);
    console.log(`–ò–≥—Ä–æ–∫—É ${username} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–∞ ${dummyCard.name}.`);
    updateUI();
  } else if (player && player.hand.some(card => card.name === dummyCard.name)) {
    alert(`–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–∞—Ä—Ç–∞ ${dummyCard.name}!`);
  } else {
    alert("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É.");
  }

  socket.send(JSON.stringify({
    type: "game_move",
    roomId,
    username,
    move: "draw_card"
  }));
}

function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

function attack(targetIndex) {
  if (!isMyTurn) {
    alert("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!");
    return;
  }

  if (playedBang) {
    alert("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ '–ë–∞—Ö!' –≤ —ç—Ç–æ–º —Ö–æ–¥—É!");
    return;
  }

  const player = players[currentPlayerIndex];


  let attackCardIndex = player.hand.findIndex(card => card.type === "attack");
  if (attackCardIndex === -1) {
    alert("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç—ã '–ë–∞—Ö'!");
    return;
  }
  socket.send(JSON.stringify({
    type: "game_move",
    roomId,
    username,
    move: "attack",
    target: players[targetIndex].username
  }));

}

function heal() {
  if (!isMyTurn) {
    alert("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!");
    return;
  }

  const currentPlayer = players.find(p => p.username === username);
  if (!currentPlayer.hand.some(c => c.type === "heal")) {
    alert("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç—ã '–ü–∏–≤–æ'!");
    return;
  }

  socket.send(JSON.stringify({
    type: "game_move",
    roomId,
    username,
    move: "heal"
  }));
}

function playDynamite() {
  if (!isMyTurn) {
    alert("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!");
    return;
  }

  const player = players.find(p => p.username === username);
  if (!player) return;

  const dynamiteCardIndex = player.hand.findIndex(card => card.type === "dynamite");


  if (dynamiteCardIndex === -1) {
    alert("–£ –≤–∞—Å –Ω–µ—Ç '–î–∏–Ω–∞–º–∏—Ç–∞'!");
    return;
  }

  socket.send(JSON.stringify({
    type: "game_move",
    roomId,
    username,
    move: "play_dynamite"
  }));
}

function enforceCardLimit() {
  const player = players[currentPlayerIndex];

  while (player.hand.length > player.hp) {
    player.hand.pop();
  }
}

function updateUI() {
  const gameTable = document.getElementById("game-table");
  if (!gameTable) return;
  if (window.location.pathname.includes("game.html") && players && players.length > 0 && username === players[0].username && !initialTurnHardcodeApplied) {
    const alivePlayersCount = players.filter(p => p.isAlive).length;
    if (alivePlayersCount > 0) {
      isMyTurn = true;
      currentTurn = username;
      initialTurnHardcodeApplied = true;
      console.log("–ü–µ—Ä–≤—ã–π —Ö–æ–¥ " + username);
    }
  } else {
    isMyTurn = currentTurn === username;
  }

  gameTable.innerHTML = "";

  players.forEach((player) => {
    const playerDiv = document.createElement("div");
    playerDiv.className = "player-zone";

    if (player.username === currentTurn) {
      playerDiv.classList.add("current-turn");
    }

    playerDiv.innerHTML = `
      <h3>${player.username}: ${player.role}${!player.isAlive ? ' (–í—ã–±—ã–ª)' : ''}</h3>
      <p>HP: ${player.hp}</p>
       <div class="player-equipped-cards">
          ${player.activeDynamite ? '<span class="status-icon" title="–î–∏–Ω–∞–º–∏—Ç">üí£</span>' : ''}
          ${player.isImprisoned ? '<span class="status-icon" title="–í –¢—é—Ä—å–º–∞">‚õìÔ∏è</span>' : ''}
          </div>
      <div class="player-cards">
        ${player.hand?.map(card => {
      if (player.username === username) {
        return `<img src="${card.img}" alt="${card.name}" class="card" data-type="${card.type}" title="${card.name}" onclick="handleCardClick(event)">`;
      } else {
        return `<div class="card card-back" title="${player.hand.length} –∫–∞—Ä—Ç(—ã)"></div>`;
      }
    }).join('') || ''}
      </div>
    `;
    gameTable.appendChild(playerDiv);
  });

  const currentPlayerInfo = players.find(p => p.username === username);
  if (currentPlayerInfo) {
    document.getElementById("player-role").textContent = `–†–æ–ª—å: ${currentPlayerInfo.role}`;
    document.getElementById("player-hp").textContent = `–ó–¥–æ—Ä–æ–≤—å–µ: ${currentPlayerInfo.hp}`;
  } else {
    document.getElementById("player-role").textContent = `–†–æ–ª—å: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ`;
    document.getElementById("player-hp").textContent = `–ó–¥–æ—Ä–æ–≤—å–µ: 0`;
  }

  updateActionButtons();
  updateDebugInfo();
}


function updateActionButtons() {
  const actions = document.getElementById("action-buttons");
  if (!actions) return;

  actions.innerHTML = '';
  if (!isMyTurn) {
    actions.innerHTML = `<div class="wait-message">–û–∂–∏–¥–∞–π—Ç–µ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞ ${currentTurn}</div>`;
    return;
  }

  const currentPlayer = players.find(p => p.username === username);
  if (!currentPlayer) return;

  const buttons = [
    {
      text: "–í—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É",
      onclick: "drawNewCard()",
      id: "draw-card",
      disabled: false
    },
    {
      text: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å '–ü–∏–≤–æ'",
      onclick: "heal()",
      id: "heal-btn",
      disabled: !currentPlayer.hand.some(c => c.type === "heal")
    },
    {
      text: "–ê—Ç–∞–∫–æ–≤–∞—Ç—å",
      onclick: "chooseTarget()",
      id: "attack-btn",
      disabled: (!currentPlayer.hand.some(c => c.type === "attack") && !currentPlayer.hand.some(c => c.name === "–í–∏–Ω—á–µ—Å—Ç–µ—Ä")) || playedBang
    },
    {
      text: "–ó–∞–ª–æ–∂–∏—Ç—å '–î–∏–Ω–∞–º–∏—Ç'",
      onclick: "playDynamite()",
      id: "dynamite-btn",
      disabled: !currentPlayer.hand.some(c => c.name === "–î–∏–Ω–∞–º–∏—Ç")
    },
    {
      text: "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ö–æ–¥",
      onclick: "endTurn()",
      id: "end-turn-btn",
      disabled: false
    }
  ];

  buttons.forEach(btn => {
    const button = document.createElement("button");
    button.textContent = btn.text;
    button.id = btn.id;
    button.onclick = new Function(btn.onclick);
    button.disabled = btn.disabled;
    actions.appendChild(button);
  });
}
function chooseTargetUsername() {
  const availableTargets = players.filter(p =>
    p.username !== username &&
    p.isAlive
  );

  if (availableTargets.length === 0) {
    alert("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ª–µ–π!");
    return null;
  }

  const targetList = availableTargets.map((p, i) => `${i + 1}. ${p.username}`).join('\n');
  const choice = prompt(`–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å:\n${targetList}`);

  if (!choice) return null;

  const targetIndex = parseInt(choice) - 1;
  if (isNaN(targetIndex) || targetIndex < 0 || targetIndex >= availableTargets.length) {
    alert("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ü–µ–ª–∏!");
    return null;
  }

  const target = availableTargets[targetIndex];
  return target.username;
}

function chooseTarget() {
  if (!isMyTurn) {
    alert("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!");
    return;
  }
  const currentPlayer = players.find(p => p.username === username);
  if (!currentPlayer) return;

  const hasAttackCard = currentPlayer.hand.some(c => c.type === "attack") || currentPlayer.hand.some(c => c.name === "–í–∏–Ω—á–µ—Å—Ç–µ—Ä");

  if (!hasAttackCard) {
    alert("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç—ã –¥–ª—è –∞—Ç–∞–∫–∏ (–ë–∞—Ö –∏–ª–∏ –í–∏–Ω—á–µ—Å—Ç–µ—Ä)!");
    return;
  }

  if (playedBang && !currentPlayer.hand.some(c => c.name === "–í–∏–Ω—á–µ—Å—Ç–µ—Ä")) {
    alert("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ '–ë–∞—Ö!' –≤ —ç—Ç–æ–º —Ö–æ–¥—É! (–ù–æ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –í–∏–Ω—á–µ—Å—Ç–µ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)");
    return;
  }


  const availableTargets = players.filter(p =>
    p.username !== username &&
    p.isAlive
  );

  if (availableTargets.length === 0) {
    alert("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ª–µ–π –¥–ª—è –∞—Ç–∞–∫–∏!");
    return;
  }

  const targetList = availableTargets.map((p, i) => `${i + 1}. ${p.username}`).join('\n');
  const choice = prompt(`–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –∞—Ç–∞–∫–∏:\n${targetList}`);

  if (!choice) return;

  const targetIndex = parseInt(choice) - 1;
  if (isNaN(targetIndex) || targetIndex < 0 || targetIndex >= availableTargets.length) {
    alert("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ü–µ–ª–∏!");
    return;
  }

  const target = availableTargets[targetIndex];

  let attackMove = "attack";
  if (currentPlayer.hand.some(c => c.name === "–í–∏–Ω—á–µ—Å—Ç–µ—Ä")) {
    attackMove = "attack_winchester";
  }

  socket.send(JSON.stringify({
    type: "game_move",
    roomId,
    username,
    move: attackMove,
    target: target.username
  }));
}

function endTurn() {
  if (!isMyTurn) {
    alert("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!");
    return;
  }
  isMyTurn = false;
  playedBang = false;

  const currentPlayersIndex = players.findIndex(p => p.username === username);
  let nextTurnIndex = currentPlayersIndex;
  let attempts = 0;
  let foundNext = false;
  do {
    nextTurnIndex = (nextTurnIndex + 1) % players.length;
    attempts++;
    if (attempts >= players.length) {
      console.warn(" –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ.");
      break;
    }

    const nextPlayer = players[nextTurnIndex];
    if (nextPlayer && nextPlayer.isAlive) {
      currentTurn = nextPlayer.username;
      console.log(` –•–æ–¥ –ø–µ—Ä–µ–¥–∞–Ω –∏–≥—Ä–æ–∫—É ${currentTurn} –Ω–∞ UI.`);
      foundNext = true;
      break;
    }

  } while (!foundNext);

  if (!foundNext) {
    console.warn(" –•–æ–¥ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π –∂–∏–≤–æ–π –∏–≥—Ä–æ–∫.");
    currentTurn = null;
  }

  updateUI();
  updateActionButtons();

  socket.send(JSON.stringify({
    type: "game_move",
    roomId,
    username,
    move: "end_turn"
  }));
}

document.addEventListener('DOMContentLoaded', () => {
  if (window.location.pathname.includes("game.html")) {
    updateUI();
    updatePlayerIndex();
    if (players && players[currentPlayerIndex]) {
      updatePlayerInfo();
      updateDebugInfo();
    } else {
    }
  }
});

function getCardImage(cardName) {
  const map = {
    "–ë–∞—Ö": "bah.png",
    "–ü—Ä–æ–º–∞—Ö": "promah.png",
    "–ü–∏–≤–æ": "pivo.png",
    "–î–∏–Ω–∞–º–∏—Ç": "tnt.png",
    "–ü–∞–Ω–∏–∫–∞": "panika.png",
    "–ü–ª—É—Ç–æ–≤–∫–∞": "plutovka.png",
    "–í–∏–Ω—á–µ—Å—Ç–µ—Ä": "vinchester.png",
    "–ú—É—Å—Ç–∞–Ω–≥": "mustang.png",
    "–ë–æ—á–∫–∞": "bochka.png",
    "–¢—é—Ä—å–º–∞": "prison.png",
    "–î–∏–ª–∏–∂–∞–Ω—Å": "dilijans.png"
  };

  return `images/${map[cardName] || "rubashka.png"}`;
}

function updatePlayerInfo() {
  const playerRole = document.getElementById('player-role');
  const playerHp = document.getElementById('player-hp');
  const currentPlayer = players.find(p => p.username === username);

  if (currentPlayer) {
    playerRole.textContent = `–†–æ–ª—å: ${currentPlayer.role}`;
    playerHp.textContent = `–ó–¥–æ—Ä–æ–≤—å–µ: ${currentPlayer.hp}`;
  } else {
    playerRole.textContent = `–†–æ–ª—å: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ`;
    playerHp.textContent = `–ó–¥–æ—Ä–æ–≤—å–µ: 0`;
  }
}

function startGame() {
  console.log("–ö–Ω–æ–ø–∫–∞ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É' –Ω–∞–∂–∞—Ç–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –ª–æ–±–±–∏?).");
}

function handleCardClick(event) {
  if (!isMyTurn) {
    return;
  }

  const clickedCardElement = event.target.closest('.card');
  if (!clickedCardElement) return;

  const cardName = clickedCardElement.title;
  const currentPlayer = players.find(p => p.username === username);

  if (!currentPlayer) {
    console.error("–¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    return;
  }

  const cardToUse = currentPlayer.hand.find(card => card.name === cardName);

  if (cardToUse) {
    let moveType = "play_card";
    let payload = { cardName: cardToUse.name };

    let requiresTarget = false;
    switch (cardToUse.name) {
      case "–ë–∞—Ö":
      case "–¢—é—Ä—å–º–∞":
      case "–ü–∞–Ω–∏–∫–∞":
      case "–ü–ª—É—Ç–æ–≤–∫–∞":
        requiresTarget = true;
        break;
      case "–ü–∏–≤–æ":
      case "–î–∏–Ω–∞–º–∏—Ç":
      case "–í–∏–Ω—á–µ—Å—Ç–µ—Ä":
      case "–ú—É—Å—Ç–∞–Ω–≥":
      case "–ë–æ—á–∫–∞":
      case "–î–∏–ª–∏–∂–∞–Ω—Å":
        requiresTarget = false;
        break;
      case "–ü—Ä–æ–º–∞—Ö":
        alert("–ö–∞—Ä—Ç—É '–ü—Ä–æ–º–∞—Ö' –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º.");
        return;
      default:
        console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–ª–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞: ${cardToUse.name}`);
        break;
    }
    if (requiresTarget) {
      const targetUsername = chooseTargetUsername();
      if (!targetUsername) {
        console.log("–í—ã–±–æ—Ä —Ü–µ–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ª–µ–π.");
        return; 
      }
      payload.target = targetUsername;
    }

    console.log(`${username} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–∞—Ä—Ç—É "${cardName}". –û—Ç–ø—Ä–∞–≤–ª—è–µ–º game_move –Ω–∞ —Å–µ—Ä–≤–µ—Ä.`, payload);
    socket.send(JSON.stringify({
      type: "game_move",
      roomId,
      username,
      move: moveType,
      ...payload
    }));

    if (cardToUse.name === "–ë–∞—Ö" || cardToUse.name === "–í–∏–Ω—á–µ—Å—Ç–µ—Ä") {
      const targetPlayer = players.find(p => p.username === payload.target);
      if (targetPlayer) {
        const hit = confirm(`–ò–≥—Ä–æ–∫ ${payload.target}, —É –≤–∞—Å –µ—Å—Ç—å –ü—Ä–æ–º–∞—Ö? (–ù–∞–∂–º–∏—Ç–µ OK –µ—Å–ª–∏ –µ—Å—Ç—å, –û—Ç–º–µ–Ω–∞ –µ—Å–ª–∏ –Ω–µ—Ç)`);
        if (!hit) {
          targetPlayer.hp--;
          console.log(`–°–Ω—è—Ç–æ 1 HP —É ${payload.target}. –¢–µ–∫—É—â–µ–µ HP: ${targetPlayer.hp}`);
          alert(`${payload.target} –ø–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–Ω! HP: ${targetPlayer.hp}`);
          if (targetPlayer.hp <= 0) {
            targetPlayer.isAlive = false;
            alert(`${targetPlayer.username} –≤—ã–±—ã–ª –∏–∑ –∏–≥—Ä—ã!`);
          }
        } else {
          console.log(`${payload.target} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ü—Ä–æ–º–∞—Ö.`);
          alert(`${payload.target} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ü—Ä–æ–º–∞—Ö!`);
        }
      }

      const cardToRemoveIndex = currentPlayer.hand.findIndex(c => c.name === cardName);
      if (cardToRemoveIndex !== -1) {
        currentPlayer.hand.splice(cardToRemoveIndex, 1);
        console.log(`–£–¥–∞–ª–µ–Ω–∞ –∫–∞—Ä—Ç–∞ "${cardName}" –∏–∑ —Ä—É–∫–∏ ${username}.`);
      }

    } else if (cardToUse.type !== "weapon" && cardToUse.type !== "horse" && cardToUse.type !== "barrel" && cardToUse.name !== "–î–∏–Ω–∞–º–∏—Ç" && cardToUse.name !== "–¢—é—Ä—å–º–∞") {
      const cardToRemoveIndex = currentPlayer.hand.findIndex(c => c.name === cardName);
      if (cardToRemoveIndex !== -1) {
        currentPlayer.hand.splice(cardToRemoveIndex, 1);
        console.log(` –£–¥–∞–ª–µ–Ω–∞ –∫–∞—Ä—Ç–∞ "${cardName}" –∏–∑ —Ä—É–∫–∏ ${username}.`);
      }
    } else {
      const cardToRemoveIndex = currentPlayer.hand.findIndex(c => c.name === cardName);
      if (cardToRemoveIndex !== -1) {
        const equippedCard = currentPlayer.hand.splice(cardToRemoveIndex, 1)[0];
        console.log(` –ö–∞—Ä—Ç–∞ "${cardName}" —É–±—Ä–∞–Ω–∞ –∏–∑ —Ä—É–∫–∏ –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏.`);
      }
    }

    updateUI();
    updatePlayerInfo();

  } else {
    console.warn(`–ö–∞—Ä—Ç–∞ "${cardName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä—É–∫–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.`);
    alert("–£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–π –∫–∞—Ä—Ç—ã!");
  }
}

document.addEventListener('click', function (event) {
  const actionButton = event.target.closest('.action-buttons button');
  if (actionButton && window.location.pathname.includes("game.html") && players && players.length > 0 && username === players[0].username && isMyTurn) {
    console.log(`–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –¥–µ–π—Å—Ç–≤–∏–π: ${actionButton.textContent}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π game_move.`);
    socket.send(JSON.stringify({
      type: "game_move",
      roomId: sessionStorage.getItem("roomId"),
      username: sessionStorage.getItem("username"),
      move: "test_action",
      buttonId: actionButton.id
    }));
    event.preventDefault();
    event.stopPropagation();
  }
});

function updateDebugInfo() {
  const debugInfo = document.getElementById('debug-info');
  if (debugInfo) {
    const playersDebug = players ? players.map(p => ({ username: p.username, isMyTurn: p.isMyTurn || false, isAlive: p.isAlive, hp: p.hp })) : [];
    console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Debug Info: currentTurn='${currentTurn}', isMyTurn=${isMyTurn}, players=${JSON.stringify(playersDebug)}`);

    document.getElementById('current-turn-debug').textContent = currentTurn || '-';
    document.getElementById('my-turn-debug').textContent = isMyTurn ? '–î–∞' : '–ù–µ—Ç';
    document.getElementById('players-count').textContent = Array.isArray(players) ? players.length : 0;

    console.log('Debug Info:', {
      currentTurn,
      isMyTurn,
      playersCount: Array.isArray(players) ? players.length : 0,
      currentPlayerIndex,
      username
    });
  }
}

function handleCredentialResponse(response) {
  if (response.credential) {
    const decodedToken = jwt_decode(response.credential);
    console.log("–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:", decodedToken);

    const username = decodedToken.name || decodedToken.given_name || '–ò–≥—Ä–æ–∫';

    sessionStorage.setItem("username", username);

    console.log("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –ª–æ–±–±–∏.");

    window.location.href = "lobby.html";

  } else {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Google.");
    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ Google. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
  }
}